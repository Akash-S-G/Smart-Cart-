{"ast":null,"code":"import create from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Sample admin credentials (replace with actual admin validation in production)\nconst ADMIN_CREDENTIALS = {\n  email: 'admin@smartcart.com',\n  password: 'admin123'\n};\nexport const useAuthStore = create(persist((set, get) => ({\n  token: null,\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  setToken: token => {\n    if (token) {\n      const decoded = jwtDecode(token);\n      set({\n        token,\n        user: decoded,\n        isAuthenticated: true\n      });\n    } else {\n      set({\n        token: null,\n        user: null,\n        isAuthenticated: false\n      });\n    }\n  },\n  logout: () => {\n    set({\n      token: null,\n      user: null,\n      isAuthenticated: false\n    });\n    toast.success('Logged out successfully');\n  },\n  refreshToken: async () => {\n    try {\n      const response = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${get().token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const decoded = jwtDecode(data.token);\n        set({\n          token: data.token,\n          user: decoded,\n          isAuthenticated: true\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      return false;\n    }\n  },\n  login: async (email, password, role = 'user') => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Handle admin login\n      if (role === 'admin') {\n        if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n          const adminUser = {\n            email: ADMIN_CREDENTIALS.email,\n            name: 'Admin',\n            role: 'admin'\n          };\n          set({\n            token: 'admin-token',\n            // In production, use proper JWT\n            user: adminUser,\n            isAuthenticated: true,\n            isLoading: false\n          });\n          return true;\n        } else {\n          throw new Error('Invalid admin credentials');\n        }\n      }\n\n      // Handle regular user login\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      const decoded = jwtDecode(token);\n\n      // Verify user role\n      if (role === 'user' && decoded.role !== 'admin') {\n        set({\n          token,\n          user: decoded,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        return true;\n      } else {\n        throw new Error('Invalid user credentials');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Login failed';\n      set({\n        error: errorMessage,\n        isLoading: false\n      });\n      toast.error(errorMessage);\n      return false;\n    }\n  },\n  register: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      const {\n        token\n      } = response.data;\n      set({\n        token,\n        user: jwtDecode(token),\n        isAuthenticated: true,\n        isLoading: false\n      });\n      toast.success('Registration successful!');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      set({\n        error: errorMessage,\n        isLoading: false\n      });\n      toast.error(errorMessage);\n      return false;\n    }\n  },\n  updateProfile: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.put(`${API_URL}/user/profile`, userData, {\n        headers: {\n          Authorization: `Bearer ${get().token}`\n        }\n      });\n      const {\n        user\n      } = response.data;\n      set({\n        user,\n        isLoading: false\n      });\n      toast.success('Profile updated successfully!');\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed';\n      set({\n        error: errorMessage,\n        isLoading: false\n      });\n      toast.error(errorMessage);\n      return false;\n    }\n  },\n  clearError: () => set({\n    error: null\n  })\n}), {\n  name: 'auth-storage',\n  getStorage: () => localStorage\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","persist","jwtDecode","axios","toast","API_URL","process","env","REACT_APP_API_URL","ADMIN_CREDENTIALS","email","password","useAuthStore","set","get","token","user","isAuthenticated","isLoading","error","setToken","decoded","logout","success","refreshToken","response","fetch","method","headers","ok","data","json","console","login","role","adminUser","name","Error","post","_error$response","_error$response$data","errorMessage","message","register","userData","_error$response2","_error$response2$data","updateProfile","put","Authorization","_error$response3","_error$response3$data","clearError","getStorage","localStorage"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/authStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Sample admin credentials (replace with actual admin validation in production)\r\nconst ADMIN_CREDENTIALS = {\r\n  email: 'admin@smartcart.com',\r\n  password: 'admin123'\r\n};\r\n\r\nexport const useAuthStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      token: null,\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n      \r\n      setToken: (token) => {\r\n        if (token) {\r\n          const decoded = jwtDecode(token);\r\n          set({ token, user: decoded, isAuthenticated: true });\r\n        } else {\r\n          set({ token: null, user: null, isAuthenticated: false });\r\n        }\r\n      },\r\n\r\n      logout: () => {\r\n        set({ token: null, user: null, isAuthenticated: false });\r\n        toast.success('Logged out successfully');\r\n      },\r\n\r\n      refreshToken: async () => {\r\n        try {\r\n          const response = await fetch('/api/auth/refresh', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Authorization': `Bearer ${get().token}`\r\n            }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            const decoded = jwtDecode(data.token);\r\n            set({ token: data.token, user: decoded, isAuthenticated: true });\r\n            return true;\r\n          }\r\n          return false;\r\n        } catch (error) {\r\n          console.error('Error refreshing token:', error);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      login: async (email, password, role = 'user') => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          // Handle admin login\r\n          if (role === 'admin') {\r\n            if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n              const adminUser = {\r\n                email: ADMIN_CREDENTIALS.email,\r\n                name: 'Admin',\r\n                role: 'admin'\r\n              };\r\n              set({ \r\n                token: 'admin-token', // In production, use proper JWT\r\n                user: adminUser,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n              });\r\n              return true;\r\n            } else {\r\n              throw new Error('Invalid admin credentials');\r\n            }\r\n          }\r\n\r\n          // Handle regular user login\r\n          const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n          const { token } = response.data;\r\n          const decoded = jwtDecode(token);\r\n          \r\n          // Verify user role\r\n          if (role === 'user' && decoded.role !== 'admin') {\r\n            set({ token, user: decoded, isAuthenticated: true, isLoading: false });\r\n            return true;\r\n          } else {\r\n            throw new Error('Invalid user credentials');\r\n          }\r\n        } catch (error) {\r\n          const errorMessage = error.response?.data?.message || error.message || 'Login failed';\r\n          set({ error: errorMessage, isLoading: false });\r\n          toast.error(errorMessage);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      register: async (userData) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await axios.post(`${API_URL}/auth/register`, userData);\r\n          const { token } = response.data;\r\n          set({ token, user: jwtDecode(token), isAuthenticated: true, isLoading: false });\r\n          toast.success('Registration successful!');\r\n          return true;\r\n        } catch (error) {\r\n          const errorMessage = error.response?.data?.message || 'Registration failed';\r\n          set({ error: errorMessage, isLoading: false });\r\n          toast.error(errorMessage);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      updateProfile: async (userData) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await axios.put(\r\n            `${API_URL}/user/profile`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${get().token}`\r\n              }\r\n            }\r\n          );\r\n          const { user } = response.data;\r\n          set({ user, isLoading: false });\r\n          toast.success('Profile updated successfully!');\r\n          return true;\r\n        } catch (error) {\r\n          const errorMessage = error.response?.data?.message || 'Profile update failed';\r\n          set({ error: errorMessage, isLoading: false });\r\n          toast.error(errorMessage);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      clearError: () => set({ error: null })\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      getStorage: () => localStorage,\r\n    }\r\n  )\r\n);\r\n\r\nexport default useAuthStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}