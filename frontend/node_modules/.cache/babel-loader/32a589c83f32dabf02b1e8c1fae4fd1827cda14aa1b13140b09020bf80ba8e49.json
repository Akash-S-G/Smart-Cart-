{"ast":null,"code":"import create from 'zustand';\nimport { io } from 'socket.io-client';\nimport { devtools, persist } from 'zustand/middleware';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.74.207:5000';\n\n// Custom middleware to handle WebSocket reconnection\nconst socketMiddleware = config => (set, get, api) => {\n  const initialState = config((...args) => {\n    set(...args);\n  }, get, api);\n  let reconnectTimer = null;\n  let reconnectAttempts = 0;\n  const MAX_RECONNECT_ATTEMPTS = 5;\n  const RECONNECT_INTERVAL = 5000;\n  return {\n    ...initialState,\n    initializeSocket: cartId => {\n      if (!cartId) {\n        console.warn('No cart ID provided for socket connection');\n        return;\n      }\n\n      // Clear any existing reconnect timer\n      if (reconnectTimer) {\n        clearTimeout(reconnectTimer);\n        reconnectTimer = null;\n      }\n\n      // If there's an existing connection for this cart, don't create a new one\n      const currentSocket = get().socket;\n      if (currentSocket !== null && currentSocket !== void 0 && currentSocket.connected && get().cartId === cartId) {\n        console.log('Socket already connected for cart:', cartId);\n        return;\n      }\n\n      // Cleanup existing socket if any\n      if (currentSocket) {\n        currentSocket.disconnect();\n      }\n\n      // Reset connection state\n      reconnectAttempts = 0;\n      set({\n        error: null\n      });\n\n      // Create new socket connection\n      const socket = io(API_URL, {\n        query: {\n          cart_id: cartId\n        },\n        reconnection: true,\n        reconnectionAttempts: MAX_RECONNECT_ATTEMPTS,\n        reconnectionDelay: RECONNECT_INTERVAL,\n        timeout: 10000\n      });\n\n      // Socket event handlers\n      socket.on('connect', () => {\n        console.log('Socket connected for cart:', cartId);\n        reconnectAttempts = 0;\n        set({\n          isConnected: true,\n          error: null\n        });\n      });\n      socket.on('connection_confirmed', data => {\n        console.log('Connection confirmed:', data);\n      });\n      socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        set({\n          isConnected: false\n        });\n\n        // Only attempt to reconnect if we haven't reached max attempts\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n          reconnectTimer = setTimeout(() => {\n            reconnectAttempts++;\n            console.log(`Attempting to reconnect (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\n            socket.connect();\n          }, RECONNECT_INTERVAL);\n        } else {\n          set({\n            error: 'Maximum reconnection attempts reached'\n          });\n        }\n      });\n      socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        set({\n          error: error.message\n        });\n      });\n      socket.on('frame_update', frameData => {\n        set({\n          lastFrame: frameData\n        });\n      });\n      set({\n        socket,\n        cartId\n      });\n    },\n    disconnect: () => {\n      const {\n        socket\n      } = get();\n      if (socket) {\n        if (reconnectTimer) {\n          clearTimeout(reconnectTimer);\n          reconnectTimer = null;\n        }\n        socket.disconnect();\n        set({\n          socket: null,\n          isConnected: false,\n          cartId: null,\n          lastFrame: null\n        });\n      }\n    },\n    cleanup: () => {\n      const {\n        disconnect\n      } = get();\n      disconnect();\n    }\n  };\n};\nconst useWebSocketStore = create(devtools(socketMiddleware((set, get) => ({\n  socket: null,\n  isConnected: false,\n  cartId: null,\n  error: null,\n  lastFrame: null\n}))));\nexport default useWebSocketStore;","map":{"version":3,"names":["create","io","devtools","persist","API_URL","process","env","REACT_APP_API_URL","socketMiddleware","config","set","get","api","initialState","args","reconnectTimer","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL","initializeSocket","cartId","console","warn","clearTimeout","currentSocket","socket","connected","log","disconnect","error","query","cart_id","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","isConnected","data","reason","setTimeout","connect","message","frameData","lastFrame","cleanup","useWebSocketStore"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/websocketStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { io } from 'socket.io-client';\r\nimport { devtools, persist } from 'zustand/middleware';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.74.207:5000';\r\n\r\n// Custom middleware to handle WebSocket reconnection\r\nconst socketMiddleware = (config) => (set, get, api) => {\r\n  const initialState = config(\r\n    (...args) => {\r\n      set(...args);\r\n    },\r\n    get,\r\n    api\r\n  );\r\n\r\n  let reconnectTimer = null;\r\n  let reconnectAttempts = 0;\r\n  const MAX_RECONNECT_ATTEMPTS = 5;\r\n  const RECONNECT_INTERVAL = 5000;\r\n\r\n  return {\r\n    ...initialState,\r\n    initializeSocket: (cartId) => {\r\n      if (!cartId) {\r\n        console.warn('No cart ID provided for socket connection');\r\n        return;\r\n      }\r\n\r\n      // Clear any existing reconnect timer\r\n      if (reconnectTimer) {\r\n        clearTimeout(reconnectTimer);\r\n        reconnectTimer = null;\r\n      }\r\n\r\n      // If there's an existing connection for this cart, don't create a new one\r\n      const currentSocket = get().socket;\r\n      if (currentSocket?.connected && get().cartId === cartId) {\r\n        console.log('Socket already connected for cart:', cartId);\r\n        return;\r\n      }\r\n\r\n      // Cleanup existing socket if any\r\n      if (currentSocket) {\r\n        currentSocket.disconnect();\r\n      }\r\n\r\n      // Reset connection state\r\n      reconnectAttempts = 0;\r\n      set({ error: null });\r\n\r\n      // Create new socket connection\r\n      const socket = io(API_URL, {\r\n        query: { cart_id: cartId },\r\n        reconnection: true,\r\n        reconnectionAttempts: MAX_RECONNECT_ATTEMPTS,\r\n        reconnectionDelay: RECONNECT_INTERVAL,\r\n        timeout: 10000,\r\n      });\r\n\r\n      // Socket event handlers\r\n      socket.on('connect', () => {\r\n        console.log('Socket connected for cart:', cartId);\r\n        reconnectAttempts = 0;\r\n        set({ isConnected: true, error: null });\r\n      });\r\n\r\n      socket.on('connection_confirmed', (data) => {\r\n        console.log('Connection confirmed:', data);\r\n      });\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        set({ isConnected: false });\r\n\r\n        // Only attempt to reconnect if we haven't reached max attempts\r\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\r\n          reconnectTimer = setTimeout(() => {\r\n            reconnectAttempts++;\r\n            console.log(`Attempting to reconnect (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\r\n            socket.connect();\r\n          }, RECONNECT_INTERVAL);\r\n        } else {\r\n          set({ error: 'Maximum reconnection attempts reached' });\r\n        }\r\n      });\r\n\r\n      socket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        set({ error: error.message });\r\n      });\r\n\r\n      socket.on('frame_update', (frameData) => {\r\n        set({ lastFrame: frameData });\r\n      });\r\n\r\n      set({ socket, cartId });\r\n    },\r\n\r\n    disconnect: () => {\r\n      const { socket } = get();\r\n      if (socket) {\r\n        if (reconnectTimer) {\r\n          clearTimeout(reconnectTimer);\r\n          reconnectTimer = null;\r\n        }\r\n        socket.disconnect();\r\n        set({ socket: null, isConnected: false, cartId: null, lastFrame: null });\r\n      }\r\n    },\r\n\r\n    cleanup: () => {\r\n      const { disconnect } = get();\r\n      disconnect();\r\n    }\r\n  };\r\n};\r\n\r\nconst useWebSocketStore = create(\r\n  devtools(\r\n    socketMiddleware((set, get) => ({\r\n      socket: null,\r\n      isConnected: false,\r\n      cartId: null,\r\n      error: null,\r\n      lastFrame: null,\r\n    }))\r\n  )\r\n);\r\n\r\nexport default useWebSocketStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}