{"ast":null,"code":"import create from 'zustand';\nimport { io } from 'socket.io-client';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.74.207:5000';\nconst useWebSocketStore = create((set, get) => ({\n  socket: null,\n  isConnected: false,\n  cartId: null,\n  error: null,\n  lastFrame: null,\n  // Initialize socket connection\n  initializeSocket: cartId => {\n    if (!cartId) {\n      console.warn('No cart ID provided for socket connection');\n      return;\n    }\n\n    // If there's an existing connection for this cart, don't create a new one\n    const currentSocket = get().socket;\n    if (currentSocket !== null && currentSocket !== void 0 && currentSocket.connected && get().cartId === cartId) {\n      console.log('Socket already connected for cart:', cartId);\n      return;\n    }\n\n    // Cleanup existing socket if any\n    if (currentSocket) {\n      currentSocket.disconnect();\n    }\n\n    // Create new socket connection\n    const socket = io(API_URL, {\n      query: {\n        cart_id: cartId\n      },\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n\n    // Socket event handlers\n    socket.on('connect', () => {\n      console.log('Socket connected for cart:', cartId);\n      set({\n        isConnected: true,\n        error: null\n      });\n    });\n    socket.on('connection_confirmed', data => {\n      console.log('Connection confirmed:', data);\n    });\n    socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n      set({\n        isConnected: false\n      });\n    });\n    socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      set({\n        error: error.message\n      });\n    });\n    socket.on('frame_update', frameData => {\n      set({\n        lastFrame: frameData\n      });\n    });\n    set({\n      socket,\n      cartId\n    });\n  },\n  // Disconnect socket\n  disconnect: () => {\n    const {\n      socket\n    } = get();\n    if (socket) {\n      socket.disconnect();\n      set({\n        socket: null,\n        isConnected: false,\n        cartId: null,\n        lastFrame: null\n      });\n    }\n  },\n  // Clean up on unmount\n  cleanup: () => {\n    const {\n      disconnect\n    } = get();\n    disconnect();\n  }\n}));\nexport default useWebSocketStore;","map":{"version":3,"names":["create","io","API_URL","process","env","REACT_APP_API_URL","useWebSocketStore","set","get","socket","isConnected","cartId","error","lastFrame","initializeSocket","console","warn","currentSocket","connected","log","disconnect","query","cart_id","reconnection","reconnectionAttempts","reconnectionDelay","timeout","on","data","reason","message","frameData","cleanup"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/websocketStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.74.207:5000';\r\n\r\nconst useWebSocketStore = create((set, get) => ({\r\n  socket: null,\r\n  isConnected: false,\r\n  cartId: null,\r\n  error: null,\r\n  lastFrame: null,\r\n\r\n  // Initialize socket connection\r\n  initializeSocket: (cartId) => {\r\n    if (!cartId) {\r\n      console.warn('No cart ID provided for socket connection');\r\n      return;\r\n    }\r\n\r\n    // If there's an existing connection for this cart, don't create a new one\r\n    const currentSocket = get().socket;\r\n    if (currentSocket?.connected && get().cartId === cartId) {\r\n      console.log('Socket already connected for cart:', cartId);\r\n      return;\r\n    }\r\n\r\n    // Cleanup existing socket if any\r\n    if (currentSocket) {\r\n      currentSocket.disconnect();\r\n    }\r\n\r\n    // Create new socket connection\r\n    const socket = io(API_URL, {\r\n      query: { cart_id: cartId },\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n      timeout: 10000,\r\n    });\r\n\r\n    // Socket event handlers\r\n    socket.on('connect', () => {\r\n      console.log('Socket connected for cart:', cartId);\r\n      set({ isConnected: true, error: null });\r\n    });\r\n\r\n    socket.on('connection_confirmed', (data) => {\r\n      console.log('Connection confirmed:', data);\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('Socket disconnected:', reason);\r\n      set({ isConnected: false });\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('Socket connection error:', error);\r\n      set({ error: error.message });\r\n    });\r\n\r\n    socket.on('frame_update', (frameData) => {\r\n      set({ lastFrame: frameData });\r\n    });\r\n\r\n    set({ socket, cartId });\r\n  },\r\n\r\n  // Disconnect socket\r\n  disconnect: () => {\r\n    const { socket } = get();\r\n    if (socket) {\r\n      socket.disconnect();\r\n      set({ socket: null, isConnected: false, cartId: null, lastFrame: null });\r\n    }\r\n  },\r\n\r\n  // Clean up on unmount\r\n  cleanup: () => {\r\n    const { disconnect } = get();\r\n    disconnect();\r\n  }\r\n}));\r\n\r\nexport default useWebSocketStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}