{"ast":null,"code":"import { create } from 'zustand';\nconst useCartStore = create(set => ({\n  items: [],\n  addItem: product => set(state => {\n    const existingItem = state.items.find(item => item.id === product.id);\n    if (existingItem) {\n      return {\n        items: state.items.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item)\n      };\n    }\n    return {\n      items: [...state.items, {\n        ...product,\n        quantity: 1\n      }]\n    };\n  }),\n  removeItem: productId => set(state => ({\n    items: state.items.filter(item => item.id !== productId)\n  })),\n  updateQuantity: (productId, quantity) => set(state => ({\n    items: state.items.map(item => item.id === productId ? {\n      ...item,\n      quantity: Math.max(0, quantity)\n    } : item)\n  })),\n  clearCart: () => set({\n    items: []\n  }),\n  getTotal: state => state.items.reduce((total, item) => total + item.price * item.quantity, 0)\n}));\nexport default useCartStore;","map":{"version":3,"names":["create","useCartStore","set","items","addItem","product","state","existingItem","find","item","id","map","quantity","removeItem","productId","filter","updateQuantity","Math","max","clearCart","getTotal","reduce","total","price"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/cartStore.js"],"sourcesContent":["import { create } from 'zustand';\r\n\r\nconst useCartStore = create((set) => ({\r\n  items: [],\r\n  addItem: (product) => \r\n    set((state) => {\r\n      const existingItem = state.items.find(item => item.id === product.id);\r\n      if (existingItem) {\r\n        return {\r\n          items: state.items.map(item =>\r\n            item.id === product.id\r\n              ? { ...item, quantity: item.quantity + 1 }\r\n              : item\r\n          ),\r\n        };\r\n      }\r\n      return {\r\n        items: [...state.items, { ...product, quantity: 1 }],\r\n      };\r\n    }),\r\n  removeItem: (productId) =>\r\n    set((state) => ({\r\n      items: state.items.filter(item => item.id !== productId),\r\n    })),\r\n  updateQuantity: (productId, quantity) =>\r\n    set((state) => ({\r\n      items: state.items.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity: Math.max(0, quantity) }\r\n          : item\r\n      ),\r\n    })),\r\n  clearCart: () => set({ items: [] }),\r\n  getTotal: (state) => \r\n    state.items.reduce((total, item) => total + item.price * item.quantity, 0),\r\n}));\r\n\r\nexport default useCartStore; "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,MAAMC,YAAY,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACpCC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAGC,OAAO,IACfH,GAAG,CAAEI,KAAK,IAAK;IACb,MAAMC,YAAY,GAAGD,KAAK,CAACH,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;IACrE,IAAIH,YAAY,EAAE;MAChB,OAAO;QACLJ,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACQ,GAAG,CAACF,IAAI,IACzBA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAClB;UAAE,GAAGD,IAAI;UAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;QAAE,CAAC,GACxCH,IACN;MACF,CAAC;IACH;IACA,OAAO;MACLN,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAE;QAAE,GAAGE,OAAO;QAAEO,QAAQ,EAAE;MAAE,CAAC;IACrD,CAAC;EACH,CAAC,CAAC;EACJC,UAAU,EAAGC,SAAS,IACpBZ,GAAG,CAAEI,KAAK,KAAM;IACdH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACY,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKI,SAAS;EACzD,CAAC,CAAC,CAAC;EACLE,cAAc,EAAEA,CAACF,SAAS,EAAEF,QAAQ,KAClCV,GAAG,CAAEI,KAAK,KAAM;IACdH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACQ,GAAG,CAACF,IAAI,IACzBA,IAAI,CAACC,EAAE,KAAKI,SAAS,GACjB;MAAE,GAAGL,IAAI;MAAEG,QAAQ,EAAEK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,QAAQ;IAAE,CAAC,GAC5CH,IACN;EACF,CAAC,CAAC,CAAC;EACLU,SAAS,EAAEA,CAAA,KAAMjB,GAAG,CAAC;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACnCiB,QAAQ,EAAGd,KAAK,IACdA,KAAK,CAACH,KAAK,CAACkB,MAAM,CAAC,CAACC,KAAK,EAAEb,IAAI,KAAKa,KAAK,GAAGb,IAAI,CAACc,KAAK,GAAGd,IAAI,CAACG,QAAQ,EAAE,CAAC;AAC7E,CAAC,CAAC,CAAC;AAEH,eAAeX,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}