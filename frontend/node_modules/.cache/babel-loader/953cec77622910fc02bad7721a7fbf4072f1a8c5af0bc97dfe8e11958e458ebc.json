{"ast":null,"code":"import create from 'zustand';\nimport { io } from 'socket.io-client';\nimport { devtools } from 'zustand/middleware';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.175.155:5000';\nconst socketMiddleware = config => (set, get, api) => {\n  const initialState = config((...args) => {\n    set(...args);\n  }, get, api);\n  let socket = null;\n  let reconnectTimer = null;\n  const MAX_RECONNECT_ATTEMPTS = 5;\n  const BASE_RECONNECT_DELAY = 1000;\n  const clearReconnectTimer = () => {\n    if (reconnectTimer) {\n      clearTimeout(reconnectTimer);\n      reconnectTimer = null;\n    }\n  };\n  const createSocketConnection = cartId => {\n    try {\n      // Create new socket connection\n      socket = io(API_URL, {\n        query: {\n          cart_id: cartId\n        },\n        transports: ['websocket'],\n        upgrade: false,\n        reconnection: true,\n        reconnectionAttempts: MAX_RECONNECT_ATTEMPTS,\n        reconnectionDelay: BASE_RECONNECT_DELAY,\n        reconnectionDelayMax: 5000,\n        timeout: 10000\n      });\n\n      // Socket event handlers\n      socket.on('connect', () => {\n        console.log('Socket connected for cart:', cartId);\n        set({\n          isConnected: true,\n          error: null,\n          reconnectAttempts: 0,\n          socket,\n          // Store socket instance in state\n          cartId\n        });\n      });\n      socket.on('connection_confirmed', data => {\n        console.log('Connection confirmed:', data);\n        set({\n          maxConnections: data.max_connections,\n          reconnectCooldown: data.cooldown * 1000\n        });\n      });\n      socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        set({\n          isConnected: false\n        });\n      });\n      socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        set({\n          error: error.message\n        });\n      });\n      socket.on('frame_update', frameData => {\n        if (frameData.cart_id === cartId) {\n          set({\n            lastFrame: frameData.frame,\n            error: null\n          });\n        }\n      });\n      return socket;\n    } catch (error) {\n      console.error('Error creating socket connection:', error);\n      set({\n        error: error.message\n      });\n      return null;\n    }\n  };\n  return {\n    ...initialState,\n    initializeSocket: cartId => {\n      if (!cartId) {\n        console.warn('No cart ID provided for socket connection');\n        return;\n      }\n\n      // Clear any existing reconnect timer\n      clearReconnectTimer();\n\n      // Get current socket from state\n      const currentSocket = get().socket;\n\n      // If there's an existing connection for this cart, don't create a new one\n      if (currentSocket !== null && currentSocket !== void 0 && currentSocket.connected && get().cartId === cartId) {\n        console.log('Socket already connected for cart:', cartId);\n        return;\n      }\n\n      // Cleanup existing socket if any\n      if (currentSocket) {\n        currentSocket.disconnect();\n      }\n\n      // Reset connection state\n      set({\n        socket: null,\n        error: null,\n        reconnectAttempts: 0,\n        isConnected: false,\n        cartId: null,\n        lastFrame: null\n      });\n\n      // Create new connection\n      createSocketConnection(cartId);\n    },\n    disconnect: () => {\n      clearReconnectTimer();\n      const currentSocket = get().socket;\n      if (currentSocket) {\n        currentSocket.disconnect();\n      }\n      set({\n        socket: null,\n        isConnected: false,\n        cartId: null,\n        lastFrame: null,\n        error: null,\n        reconnectAttempts: 0\n      });\n    },\n    cleanup: () => {\n      const {\n        disconnect\n      } = get();\n      disconnect();\n    }\n  };\n};\nconst useWebSocketStore = create(devtools(socketMiddleware(set => ({\n  socket: null,\n  isConnected: false,\n  cartId: null,\n  error: null,\n  lastFrame: null,\n  reconnectAttempts: 0,\n  maxConnections: 1,\n  reconnectCooldown: 1000\n}))));\nexport default useWebSocketStore;","map":{"version":3,"names":["create","io","devtools","API_URL","process","env","REACT_APP_API_URL","socketMiddleware","config","set","get","api","initialState","args","socket","reconnectTimer","MAX_RECONNECT_ATTEMPTS","BASE_RECONNECT_DELAY","clearReconnectTimer","clearTimeout","createSocketConnection","cartId","query","cart_id","transports","upgrade","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","on","console","log","isConnected","error","reconnectAttempts","data","maxConnections","max_connections","reconnectCooldown","cooldown","reason","message","frameData","lastFrame","frame","initializeSocket","warn","currentSocket","connected","disconnect","cleanup","useWebSocketStore"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/websocketStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { io } from 'socket.io-client';\r\nimport { devtools } from 'zustand/middleware';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.175.155:5000';\r\n\r\nconst socketMiddleware = (config) => (set, get, api) => {\r\n  const initialState = config((...args) => { set(...args); }, get, api);\r\n\r\n  let socket = null;\r\n  let reconnectTimer = null;\r\n  const MAX_RECONNECT_ATTEMPTS = 5;\r\n  const BASE_RECONNECT_DELAY = 1000;\r\n\r\n  const clearReconnectTimer = () => {\r\n    if (reconnectTimer) {\r\n      clearTimeout(reconnectTimer);\r\n      reconnectTimer = null;\r\n    }\r\n  };\r\n\r\n  const createSocketConnection = (cartId) => {\r\n    try {\r\n      // Create new socket connection\r\n      socket = io(API_URL, {\r\n        query: { cart_id: cartId },\r\n        transports: ['websocket'],\r\n        upgrade: false,\r\n        reconnection: true,\r\n        reconnectionAttempts: MAX_RECONNECT_ATTEMPTS,\r\n        reconnectionDelay: BASE_RECONNECT_DELAY,\r\n        reconnectionDelayMax: 5000,\r\n        timeout: 10000,\r\n      });\r\n\r\n      // Socket event handlers\r\n      socket.on('connect', () => {\r\n        console.log('Socket connected for cart:', cartId);\r\n        set({ \r\n          isConnected: true, \r\n          error: null,\r\n          reconnectAttempts: 0,\r\n          socket, // Store socket instance in state\r\n          cartId\r\n        });\r\n      });\r\n\r\n      socket.on('connection_confirmed', (data) => {\r\n        console.log('Connection confirmed:', data);\r\n        set({ \r\n          maxConnections: data.max_connections,\r\n          reconnectCooldown: data.cooldown * 1000\r\n        });\r\n      });\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        set({ isConnected: false });\r\n      });\r\n\r\n      socket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        set({ error: error.message });\r\n      });\r\n\r\n      socket.on('frame_update', (frameData) => {\r\n        if (frameData.cart_id === cartId) {\r\n          set({ \r\n            lastFrame: frameData.frame,\r\n            error: null\r\n          });\r\n        }\r\n      });\r\n\r\n      return socket;\r\n    } catch (error) {\r\n      console.error('Error creating socket connection:', error);\r\n      set({ error: error.message });\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...initialState,\r\n    initializeSocket: (cartId) => {\r\n      if (!cartId) {\r\n        console.warn('No cart ID provided for socket connection');\r\n        return;\r\n      }\r\n\r\n      // Clear any existing reconnect timer\r\n      clearReconnectTimer();\r\n\r\n      // Get current socket from state\r\n      const currentSocket = get().socket;\r\n\r\n      // If there's an existing connection for this cart, don't create a new one\r\n      if (currentSocket?.connected && get().cartId === cartId) {\r\n        console.log('Socket already connected for cart:', cartId);\r\n        return;\r\n      }\r\n\r\n      // Cleanup existing socket if any\r\n      if (currentSocket) {\r\n        currentSocket.disconnect();\r\n      }\r\n\r\n      // Reset connection state\r\n      set({ \r\n        socket: null,\r\n        error: null,\r\n        reconnectAttempts: 0,\r\n        isConnected: false,\r\n        cartId: null,\r\n        lastFrame: null\r\n      });\r\n\r\n      // Create new connection\r\n      createSocketConnection(cartId);\r\n    },\r\n\r\n    disconnect: () => {\r\n      clearReconnectTimer();\r\n      const currentSocket = get().socket;\r\n      if (currentSocket) {\r\n        currentSocket.disconnect();\r\n      }\r\n      set({ \r\n        socket: null,\r\n        isConnected: false,\r\n        cartId: null,\r\n        lastFrame: null,\r\n        error: null,\r\n        reconnectAttempts: 0\r\n      });\r\n    },\r\n\r\n    cleanup: () => {\r\n      const { disconnect } = get();\r\n      disconnect();\r\n    }\r\n  };\r\n};\r\n\r\nconst useWebSocketStore = create(\r\n  devtools(\r\n    socketMiddleware((set) => ({\r\n      socket: null,\r\n      isConnected: false,\r\n      cartId: null,\r\n      error: null,\r\n      lastFrame: null,\r\n      reconnectAttempts: 0,\r\n      maxConnections: 1,\r\n      reconnectCooldown: 1000\r\n    }))\r\n  )\r\n);\r\n\r\nexport default useWebSocketStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}