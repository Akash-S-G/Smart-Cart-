{"ast":null,"code":"import create from 'zustand';\nimport { io } from 'socket.io-client';\nimport { devtools } from 'zustand/middleware';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.175.155:5000';\nconst socketMiddleware = config => (set, get, api) => {\n  const initialState = config((...args) => {\n    set(...args);\n  }, get, api);\n  let socket = null;\n  let reconnectTimer = null;\n  const MAX_RECONNECT_ATTEMPTS = 5;\n  const BASE_RECONNECT_DELAY = 1000;\n  const clearReconnectTimer = () => {\n    if (reconnectTimer) {\n      clearTimeout(reconnectTimer);\n      reconnectTimer = null;\n    }\n  };\n  return {\n    ...initialState,\n    initializeSocket: cartId => {\n      var _socket;\n      if (!cartId) {\n        console.warn('No cart ID provided for socket connection');\n        return;\n      }\n\n      // Clear any existing reconnect timer\n      clearReconnectTimer();\n\n      // If there's an existing connection for this cart, don't create a new one\n      if ((_socket = socket) !== null && _socket !== void 0 && _socket.connected && get().cartId === cartId) {\n        console.log('Socket already connected for cart:', cartId);\n        return;\n      }\n\n      // Cleanup existing socket if any\n      if (socket) {\n        socket.disconnect();\n        socket = null;\n      }\n\n      // Reset connection state\n      set({\n        error: null,\n        reconnectAttempts: 0,\n        isConnected: false\n      });\n\n      // Create new socket connection\n      socket = io(API_URL, {\n        query: {\n          cart_id: cartId\n        },\n        transports: ['websocket'],\n        upgrade: false,\n        reconnection: false,\n        // We'll handle reconnection ourselves\n        timeout: 10000\n      });\n\n      // Socket event handlers\n      socket.on('connect', () => {\n        console.log('Socket connected for cart:', cartId);\n        set({\n          isConnected: true,\n          error: null,\n          reconnectAttempts: 0\n        });\n      });\n      socket.on('connection_confirmed', data => {\n        console.log('Connection confirmed:', data);\n        // Store the server's connection limits\n        set({\n          maxConnections: data.max_connections,\n          reconnectCooldown: data.cooldown * 1000 // Convert to milliseconds\n        });\n      });\n      socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        set({\n          isConnected: false\n        });\n        const state = get();\n        if (state.reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n          const delay = Math.min(BASE_RECONNECT_DELAY * Math.pow(2, state.reconnectAttempts), 10000);\n          reconnectTimer = setTimeout(() => {\n            set({\n              reconnectAttempts: state.reconnectAttempts + 1\n            });\n            socket.connect();\n          }, delay);\n        } else {\n          set({\n            error: 'Maximum reconnection attempts reached'\n          });\n        }\n      });\n      socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        set({\n          error: error.message\n        });\n      });\n      socket.on('frame_update', frameData => {\n        if (frameData.cart_id === get().cartId) {\n          set({\n            lastFrame: frameData.frame,\n            error: null\n          });\n        }\n      });\n      set({\n        socket,\n        cartId,\n        isConnected: false,\n        reconnectAttempts: 0\n      });\n    },\n    disconnect: () => {\n      clearReconnectTimer();\n      if (socket) {\n        socket.disconnect();\n        socket = null;\n      }\n      set({\n        socket: null,\n        isConnected: false,\n        cartId: null,\n        lastFrame: null,\n        error: null,\n        reconnectAttempts: 0\n      });\n    },\n    cleanup: () => {\n      const {\n        disconnect\n      } = get();\n      disconnect();\n    }\n  };\n};\nconst useWebSocketStore = create(devtools(socketMiddleware(set => ({\n  socket: null,\n  isConnected: false,\n  cartId: null,\n  error: null,\n  lastFrame: null,\n  reconnectAttempts: 0,\n  maxConnections: 1,\n  reconnectCooldown: 1000\n}))));\nexport default useWebSocketStore;","map":{"version":3,"names":["create","io","devtools","API_URL","process","env","REACT_APP_API_URL","socketMiddleware","config","set","get","api","initialState","args","socket","reconnectTimer","MAX_RECONNECT_ATTEMPTS","BASE_RECONNECT_DELAY","clearReconnectTimer","clearTimeout","initializeSocket","cartId","_socket","console","warn","connected","log","disconnect","error","reconnectAttempts","isConnected","query","cart_id","transports","upgrade","reconnection","timeout","on","data","maxConnections","max_connections","reconnectCooldown","cooldown","reason","state","delay","Math","min","pow","setTimeout","connect","message","frameData","lastFrame","frame","cleanup","useWebSocketStore"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/websocketStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { io } from 'socket.io-client';\r\nimport { devtools } from 'zustand/middleware';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://192.168.175.155:5000';\r\n\r\nconst socketMiddleware = (config) => (set, get, api) => {\r\n  const initialState = config((...args) => { set(...args); }, get, api);\r\n\r\n  let socket = null;\r\n  let reconnectTimer = null;\r\n  const MAX_RECONNECT_ATTEMPTS = 5;\r\n  const BASE_RECONNECT_DELAY = 1000;\r\n\r\n  const clearReconnectTimer = () => {\r\n    if (reconnectTimer) {\r\n      clearTimeout(reconnectTimer);\r\n      reconnectTimer = null;\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...initialState,\r\n    initializeSocket: (cartId) => {\r\n      if (!cartId) {\r\n        console.warn('No cart ID provided for socket connection');\r\n        return;\r\n      }\r\n\r\n      // Clear any existing reconnect timer\r\n      clearReconnectTimer();\r\n\r\n      // If there's an existing connection for this cart, don't create a new one\r\n      if (socket?.connected && get().cartId === cartId) {\r\n        console.log('Socket already connected for cart:', cartId);\r\n        return;\r\n      }\r\n\r\n      // Cleanup existing socket if any\r\n      if (socket) {\r\n        socket.disconnect();\r\n        socket = null;\r\n      }\r\n\r\n      // Reset connection state\r\n      set({ \r\n        error: null,\r\n        reconnectAttempts: 0,\r\n        isConnected: false\r\n      });\r\n\r\n      // Create new socket connection\r\n      socket = io(API_URL, {\r\n        query: { cart_id: cartId },\r\n        transports: ['websocket'],\r\n        upgrade: false,\r\n        reconnection: false, // We'll handle reconnection ourselves\r\n        timeout: 10000,\r\n      });\r\n\r\n      // Socket event handlers\r\n      socket.on('connect', () => {\r\n        console.log('Socket connected for cart:', cartId);\r\n        set({ \r\n          isConnected: true, \r\n          error: null,\r\n          reconnectAttempts: 0\r\n        });\r\n      });\r\n\r\n      socket.on('connection_confirmed', (data) => {\r\n        console.log('Connection confirmed:', data);\r\n        // Store the server's connection limits\r\n        set({ \r\n          maxConnections: data.max_connections,\r\n          reconnectCooldown: data.cooldown * 1000 // Convert to milliseconds\r\n        });\r\n      });\r\n\r\n      socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        set({ isConnected: false });\r\n        \r\n        const state = get();\r\n        if (state.reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\r\n          const delay = Math.min(\r\n            BASE_RECONNECT_DELAY * Math.pow(2, state.reconnectAttempts),\r\n            10000\r\n          );\r\n          \r\n          reconnectTimer = setTimeout(() => {\r\n            set({ reconnectAttempts: state.reconnectAttempts + 1 });\r\n            socket.connect();\r\n          }, delay);\r\n        } else {\r\n          set({ error: 'Maximum reconnection attempts reached' });\r\n        }\r\n      });\r\n\r\n      socket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        set({ error: error.message });\r\n      });\r\n\r\n      socket.on('frame_update', (frameData) => {\r\n        if (frameData.cart_id === get().cartId) {\r\n          set({ \r\n            lastFrame: frameData.frame,\r\n            error: null\r\n          });\r\n        }\r\n      });\r\n\r\n      set({ \r\n        socket,\r\n        cartId,\r\n        isConnected: false,\r\n        reconnectAttempts: 0\r\n      });\r\n    },\r\n\r\n    disconnect: () => {\r\n      clearReconnectTimer();\r\n      if (socket) {\r\n        socket.disconnect();\r\n        socket = null;\r\n      }\r\n      set({ \r\n        socket: null,\r\n        isConnected: false,\r\n        cartId: null,\r\n        lastFrame: null,\r\n        error: null,\r\n        reconnectAttempts: 0\r\n      });\r\n    },\r\n\r\n    cleanup: () => {\r\n      const { disconnect } = get();\r\n      disconnect();\r\n    }\r\n  };\r\n};\r\n\r\nconst useWebSocketStore = create(\r\n  devtools(\r\n    socketMiddleware((set) => ({\r\n      socket: null,\r\n      isConnected: false,\r\n      cartId: null,\r\n      error: null,\r\n      lastFrame: null,\r\n      reconnectAttempts: 0,\r\n      maxConnections: 1,\r\n      reconnectCooldown: 1000\r\n    }))\r\n  )\r\n);\r\n\r\nexport default useWebSocketStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}