{"ast":null,"code":"import create from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport jwt_decode from 'jwt-decode';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst useAuthStore = create(persist((set, get) => ({\n  token: null,\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  setToken: token => {\n    if (token) {\n      const decoded = jwt_decode(token);\n      set({\n        token,\n        user: decoded,\n        isAuthenticated: true\n      });\n    } else {\n      set({\n        token: null,\n        user: null,\n        isAuthenticated: false\n      });\n    }\n  },\n  logout: () => {\n    set({\n      token: null,\n      user: null,\n      isAuthenticated: false\n    });\n  },\n  refreshToken: async () => {\n    try {\n      const response = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${get().token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const decoded = jwt_decode(data.token);\n        set({\n          token: data.token,\n          user: decoded,\n          isAuthenticated: true\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      return false;\n    }\n  },\n  login: async (email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      set({\n        token,\n        user: jwt_decode(token),\n        isAuthenticated: true,\n        isLoading: false\n      });\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed',\n        isLoading: false\n      });\n      return false;\n    }\n  },\n  register: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      const {\n        token\n      } = response.data;\n      set({\n        token,\n        user: jwt_decode(token),\n        isAuthenticated: true,\n        isLoading: false\n      });\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed',\n        isLoading: false\n      });\n      return false;\n    }\n  },\n  updateProfile: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await axios.put(`${API_URL}/user/profile`, userData, {\n        headers: {\n          Authorization: `Bearer ${get().token}`\n        }\n      });\n      const {\n        user\n      } = response.data;\n      set({\n        user,\n        isLoading: false\n      });\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed',\n        isLoading: false\n      });\n      return false;\n    }\n  },\n  clearError: () => set({\n    error: null\n  })\n}), {\n  name: 'auth-storage',\n  getStorage: () => localStorage\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","persist","jwt_decode","axios","API_URL","process","env","REACT_APP_API_URL","useAuthStore","set","get","token","user","isAuthenticated","isLoading","error","setToken","decoded","logout","refreshToken","response","fetch","method","headers","ok","data","json","console","login","email","password","post","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","updateProfile","put","Authorization","_error$response3","_error$response3$data","clearError","name","getStorage","localStorage"],"sources":["C:/Users/akash/Desktop/MODEL/SmartCart/frontend/src/stores/authStore.js"],"sourcesContent":["import create from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst useAuthStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      token: null,\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n      \r\n      setToken: (token) => {\r\n        if (token) {\r\n          const decoded = jwt_decode(token);\r\n          set({ token, user: decoded, isAuthenticated: true });\r\n        } else {\r\n          set({ token: null, user: null, isAuthenticated: false });\r\n        }\r\n      },\r\n\r\n      logout: () => {\r\n        set({ token: null, user: null, isAuthenticated: false });\r\n      },\r\n\r\n      refreshToken: async () => {\r\n        try {\r\n          const response = await fetch('/api/auth/refresh', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Authorization': `Bearer ${get().token}`\r\n            }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            const decoded = jwt_decode(data.token);\r\n            set({ token: data.token, user: decoded, isAuthenticated: true });\r\n            return true;\r\n          }\r\n          return false;\r\n        } catch (error) {\r\n          console.error('Error refreshing token:', error);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      login: async (email, password) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n          const { token } = response.data;\r\n          set({ token, user: jwt_decode(token), isAuthenticated: true, isLoading: false });\r\n          return true;\r\n        } catch (error) {\r\n          set({ \r\n            error: error.response?.data?.message || 'Login failed', \r\n            isLoading: false \r\n          });\r\n          return false;\r\n        }\r\n      },\r\n\r\n      register: async (userData) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await axios.post(`${API_URL}/auth/register`, userData);\r\n          const { token } = response.data;\r\n          set({ token, user: jwt_decode(token), isAuthenticated: true, isLoading: false });\r\n          return true;\r\n        } catch (error) {\r\n          set({ \r\n            error: error.response?.data?.message || 'Registration failed', \r\n            isLoading: false \r\n          });\r\n          return false;\r\n        }\r\n      },\r\n\r\n      updateProfile: async (userData) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await axios.put(\r\n            `${API_URL}/user/profile`,\r\n            userData,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${get().token}`\r\n              }\r\n            }\r\n          );\r\n          const { user } = response.data;\r\n          set({ user, isLoading: false });\r\n          return true;\r\n        } catch (error) {\r\n          set({ \r\n            error: error.response?.data?.message || 'Profile update failed', \r\n            isLoading: false \r\n          });\r\n          return false;\r\n        }\r\n      },\r\n\r\n      clearError: () => set({ error: null })\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      getStorage: () => localStorage,\r\n    }\r\n  )\r\n);\r\n\r\nexport default useAuthStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}